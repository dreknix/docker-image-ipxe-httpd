---
# https://taskfile.dev

version: '3'

dotenv:
  - '.env'
  - '.env_local'

tasks:

  update:
    desc: Install/Update Flask and Python packages
    cmds:
      - pip3 install --upgrade pip setuptools
      - pip3 install --upgrade -r requirements.txt

  lint:
    desc: Lint Dockerfile with hadoline

  build:
    deps:
      - lint
    desc: Build Docker image
    cmds:
      - docker build
               --build-arg 'ROOT_DIR={{ .ROOT_DIR }}'
               --build-arg 'HTTP_PORT={{ .HTTP_PORT }}'
               --tag '{{ .IMAGE_NAME }}'
               --file Dockerfile
               .

  publish:
    desc: Publish Docker image
    cmds:
      - docker tag '{{ .IMAGE_NAME }}'
                   '{{ .DOCKER_HUB_NAMESPACE }}/{{ .IMAGE_NAME }}:latest'
      - docker push '{{ .DOCKER_HUB_NAMESPACE }}/{{ .IMAGE_NAME }}:latest'

  start:
    desc: Start Docker container in background
    cmds:
      - docker run --rm --detach
                   -p '{{ .HTTP_PORT }}:{{ .HTTP_PORT }}'
                   -v 'pxe-www:{{ .ROOT_DIR }}'
                   -v $(pwd)/config_local.json:/config_local.json
                   --name '{{ .CONTAINER_NAME }}'
                   '{{ .IMAGE_NAME }}'

  run:
    desc: Run Docker container in foreground
    cmds:
      - docker run --rm --interactive --tty
                   -p '{{ .HTTP_PORT }}:{{ .HTTP_PORT }}'
                   -v 'pxe-www:{{ .ROOT_DIR }}'
                   -v $(pwd)/config_local.json:/config_local.json
                   --name '{{ .CONTAINER_NAME }}'
                   '{{ .IMAGE_NAME }}'

  stop:
    desc: Stop Docker container
    cmds:
      - docker stop '{{ .CONTAINER_NAME }}'

  exec:
    desc: Execute shell inside container
    cmds:
      - docker exec -it '{{ .CONTAINER_NAME }}' /bin/sh

  logs:
    desc: Show container logs
    cmds:
      - docker logs '{{ .CONTAINER_NAME }}'

  serve:
    desc: Start local HTTP server for testing
    cmds:
      - ROOT_DIR=content HTTP_PORT=5000 ./pxe-httpd.py

...
